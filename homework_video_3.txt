
GitHub. HW_2
1. На локальном репозитории сделать ветки для:
- Postman - git branch postman
- Jmeter - git branch jmeter
- CheckLists - git branch check_lists
- Bag Reports - git branch bag_reports
- SQL - git branch sql
- Charles - git branch charles
- Mobile testing - git branch mobile_testing



2. Запушить все ветки на внешний репозиторий - git push -u origin postman; jmeter; check_lists; bag_reports; sql; charles; mobile_testing
3. В ветке Bag Reports сделать текстовый документ со структурой баг репорта - git checkout bag_reports; touch bag_reports.txt; vim bag_reports.txt; 

Заголовок (Summary) - Короткое описание проблемы, явно указывающее на причину и тип ошибочной ситуации.
Проект (Project) - Название тестируемого проекта
Компонент приложения (Component) - Название части или функции тестируемого продукта
Номер версии (Version) - Версия, на которой была найдена ошибка
Критичность (Severity) - Наиболее распространена пятиуровневая система критичности: S1 Блокирующий (Blocker); S2 Критический (Critical); S3 Значительный (Major); S4 Незначительный (Minor); S5 Тривиальный (Trivial).
Приоритет (Priority) - Приоритет дефекта: P1 Высокий (High); P2 Средний (Medium); P3 Низкий (Low).
Статус (Status) - Статус бага. Зависит от используемой процедуры и жизненного цикла бага. Например: Новый, Открыт, Закрыт.
Автор (Author) - Создатель баг репорта.
Назначен на (Assigned To) - Имя сотрудника, назначенного на решение проблемы.
Описание (Description) - a) Информация об окружении, на котором был найден баг: операционная система, сервис пак, имя и версия браузера, версия ПО чипа, версия библиотеки  и т.д. b) Шаги, по которым можно легко воспроизвести ситуацию, приведшую к ошибке. c) Полученный результат. d) Ожидаемый результат.
Прикрепленный файл (Attachment) - Файл с логами, скриншот или любой другой документ, который может помочь прояснить причину ошибки или указать на способ решения проблемы.

4. Запушить структуру багрепорта на внешний репозиторий - git status; git add bag_reports.txt; git commit -m "add new bag_reports"; git push
5. Вмержить ветку Bag Reports в Main - (что бы сделать мерж нужно прыгнуть в ту ветку в котрую мы будем делать мерж Main); git checkout main; git merge bag_reports.
6. Запушить main на внешний репозиторий. - git push;
7. В ветке CheckLists набросать структуру чек листа. - git checkout check_lists; vim check_lists.txt 

Минимальный чек-лист состоит из 3-х столбцов ID («Номер»), Tester Actions («Проверка», «Действия тестировщика»), Actual Result («Результат»).

8. Запушить структуру на внешний репозиторий - git add check_lists.txt; git commit -m "add new check_lists"; git push
9. На внешнем репозитории сделать Pull Request ветки CheckLists в main

https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request
Действия производились по этой ссылки

10. Синхронизировать Внешнюю и Локальную ветки Main - git checkout main; git fetch; git pull





ssh-keygen -t rsa -C "yourGitNickname"
путь куда будут сохранятся SSH ключи - (/c/Users/user/.ssh/id_rsa)
пароль 35181
git branch - отоброжает в какой ветке мы находимся 
git branch (new vetka) - создание новой ветки
git checkout apple_pay - переход в ветку перепрыгнуть на ветку
git merge apple_pay - перенос файла в созданной ветке в главную ветку
git push -u origin apple_pay - отправка созданной ветки на внешний репозиторий 